--WRITE A QUERY THAT RETURNS TRACK NAME AND ITS COMPOSER FROM TRACKS TABLE--
SELECT name, Composer
FROM tracks

--WRITE A QUERY THAT RETURNS ALL COLUMNS FROM TRACKS TABLE--
SELECT *
FROM tracks

--WRITE A QUERY THAT RETURNS THE NAME OF COMPOSERS OF EACH TRACK--
SELECT Composer, TrackId
FROM tracks 

--WRITE A QUERY THAT RETURNS UNIQUE ALBUMID, MEDIATYPEID FROM TRACKS TABLE--
SELECT DISTINCT albums.AlbumId, tracks.MediaTypeId
FROM tracks
INNER JOIN media_types ON tracks.MediaTypeId = media_types.MediaTypeId
INNER JOIN albums ON tracks.AlbumId=albums.AlbumId

---WRITE A QUERY THAT RETURNS TRACK NAME AND TRACKID OF ‘Jorge Ben’---
SELECT TrackId,name
FROM tracks 
WHERE Composer = 'Jorge Ben'

---WRITE A QUERY THAT RETURNS ALL INFO OF THE INVOICES OF WHICH TOTAL AMOUNT IS GREATER THAN $25---
SELECT *
FROM invoices
WHERE total>25

---WRITE A QUERY THAT RETURNS ALL INFO OF THE INVOICES OF WHICH TOTAL AMOUNT IS LESS THAN $15. JUST RETURN 5 ROWS---
SELECT *
FROM invoices
WHERE total<15
LIMIT 5

---WRITE A QUERY THAT RETURNS ALL INFO OF THE INVOICES OF WHICH 
---TOTAL AMOUNT IS GREATER THAN $10. THEN SORT THE TOTAL AMOUNTS
---IN DESCENDING ORDER, LASTLY DISPLAY TOP 2 ROWS
SELECT *
FROM invoices
WHERE total>10
ORDER BY total DESC
LIMIT 2

--WRITE A QUERY THAT RETURNS ALL INFO OF THE INVOICES OF WHICH
--BILLING COUNTRY IS NOT CANADA. THEN SORT THE TOTAL AMOUNTS IN
--ASCENDING ORDER, LASTLY DISPLAY TOP 10 ROWS
SELECT *
FROM invoices
WHERE BillingCountry NOT IN ("Canada") -- != "Canada
ORDER BY total -- ASC
LIMIT 10

--WRITE A QUERY THAT RETURNS INVOICEID, CUSTOMERID AND TOTAL
--DOLLAR AMOUNT FOR EACH INVOICE. THEN SORT THEM FIRST BY
--CUSTOMERID IN ASCENDING, THEN TOTAL DOLLAR AMOUNT IN
--DESCENDING ORDER.
SELECT InvoiceId, CustomerId, total
FROM invoices
ORDER BY CustomerId ASC, total DESC

--WRITE A QUERY THAT RETURNS ALL TRACK NAMES THAT START WITH ‘B’
--AND END WITH ‘S’
SELECT name
FROM tracks
WHERE name LIKE "B%S"

--WRITE A QUERY THAT RETURNS THE NEWEST DATE AMONG THE INVOICE
--DATES BETWEEN 2008 AND 2011
SELECT *
FROM invoices
WHERE InvoiceDate BETWEEN '2008-01-01' AND '2010-12-31' 

--WRITE A QUERY THAT RETURNS THE FIRST AND LAST NAME OF THE
--CUSTOMERS WHO HAVE ORDERS FROM NORWAY AND BELGIUM

SELECT FirstName, LastName
from customers
INNER JOIN invoices
ON customers.CustomerId= invoices.CustomerId
where invoices.BillingCountry IN ("Norway", "Belgium")

--WRITE A QUERY THAT RETURNS THE TRACK NAMES OF ‘ZAPPA’
SELECT name, Composer
FROM tracks
WHERE Composer LIKE '%Zappa%'

--HOW MANY TRACKS AND INVOICES ARE THERE IN THE DIGITAL MUSIC
--STORE, DISPLAY SEPERATELY
SELECT count(DISTINCT TrackId) as track_count, count(DISTINCT InvoiceId) as invoice_count 
FROM tracks, invoices

--HOW MANY COMPOSERS ARE THERE IN THE DIGITAL MUSIC STORE
SELECT COUNT(DISTINCT Composer)
FROM tracks

--HOW MANY TRACKS DOES EACH ALBUM HAVE, DISPLAY ALBUMID AND
--NUMBER OF TRACKS SORTED FROM HIGHEST TO LOWEST
SELECT AlbumId, name, COUNT(TrackId) 
FROM tracks
GROUP BY AlbumId

--WRITE A QUERY THAT RETURNS TRACK NAME HAVING THE MINIMUM AND
--MAXIMUM DURATION, DISPLAY SEPERATELY
SELECT name, MIN(Milliseconds) AS duration, MAX(Milliseconds) AS duration
FROM tracks
GROUP BY duration


---WRITE A QUERY THAT RETURNS THE TRACKS HAVING DURATION LESS
---THAN THE AVERAGE DURATION
SELECT TrackId, name, Milliseconds
FROM tracks
WHERE Milliseconds <
(	SELECT avg(Milliseconds)
	FROM tracks
	)

---WRITE A QUERY THAT RETURNS THE TOTAL NUMBER OF EACH
---COMPOSER’s TRACK.
SELECT composer, sum(TrackId) as total_number
FROM tracks
GROUP BY Composer

---WRITE A QUERY THAT RETURNS THE GENRE OF EACH TRACK.


SELECT tracks.AlbumId, albums.Title, sum(Milliseconds) 
from tracks 
INNER JOIN albums on albums.AlbumId = tracks.AlbumId  
GROUP BY albums.Title HAVING sum(Milliseconds) > 4200000  
ORDER by sum(tracks.Milliseconds) DESC





